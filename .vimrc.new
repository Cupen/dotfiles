let s:is_windows = has('win32') || has('win64')
let s:is_cygwin = has('win32unix')

let s:is_gui = has("gui_running")

let s:config = {}
let s:config.complete='ycm'
let s:config.language = {}
let s:config.language.c = 1
let s:config.language.cpp = 1
let s:config.language.python = 1
let s:config.language.javascript = 1
let s:config.language.php = 1
let s:config.language.rust = 1


set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
language messages zh_CN.UTF-8

" tab设置
set tabstop=4
set shiftwidth=4

set nospell
set wrap
set number

" 按标记折叠
" set foldmethod=marker
set foldmethod=syntax
set foldcolumn=0
setlocal foldlevel=1
set foldclose=all " 自动关闭折叠

" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif

if has('vim_starting')
    if &compatible
        set nocompatible               " Be iMproved
    endif
endif 

function! s:get_dir(dirname, ...) "{{{
    let dirpath=expand('~/.vim/' . a:dirname . '/')
        if !isdirectory(expand(dirpath))
            call mkdir(expand(dirpath))
        endif
    return dirpath
endfunction "}}}

" Required:
set runtimepath+=~/.vim/bundle/neobundle.vim/

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!
NeoBundleLazy 'Shougo/neocomplete.vim', {'autoload':{'insert':1} } "{{{
    let g:acp_enableAtStartup = 0
    let g:neocomplete#enable_smart_case = 1
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#enable_at_startup=1
    let g:neocomplete#data_directory=s:get_dir('neocomplete')
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'
    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"}}}
NeoBundle 'Shougo/unite.vim' "{{{
    let bundle = neobundle#get('unite.vim')
    function! bundle.hooks.on_source(bundle)
        call unite#filters#matcher_default#use(['matcher_fuzzy'])
        call unite#filters#sorter_default#use(['sorter_rank'])
        call unite#custom#profile('default', 'context', {
                \ 'start_insert': 1
                \ })
    endfunction

    let g:unite_data_directory=s:get_dir('unite')
    let g:unite_source_history_yank_enable=1
    let g:unite_source_rec_max_cache_files=5000

    if executable('ag')
        let g:unite_source_grep_command='ag'
        let g:unite_source_grep_default_opts='--nocolor --line-numbers --nogroup -S -C4'
        let g:unite_source_grep_recursive_opt=''
    elseif executable('ack')
        let g:unite_source_grep_command='ack'
        let g:unite_source_grep_default_opts='--no-heading --no-color -C4'
        let g:unite_source_grep_recursive_opt=''
    endif


NeoBundle 'h1mesuke/unite-outline'
NeoBundle 'Shougo/vimproc.vim', {
    \ 'build' : {
    \     'windows' : 'tools\\update-dll-mingw',
    \     'cygwin' : 'make -f make_cygwin.mak',
    \     'mac' : 'make -f make_mac.mak',
    \     'linux' : 'make',
    \     'unix' : 'gmake',
    \    },
    \ }

NeoBundle 'ctrlpvim/ctrlp.vim', { 'depends': 'tacahiroy/ctrlp-funky' } "{{{
    let g:ctrlp_clear_cache_on_exit=1
    let g:ctrlp_max_height=40
    let g:ctrlp_show_hidden=0
    let g:ctrlp_follow_symlinks=1
    let g:ctrlp_max_files=20000
    let g:ctrlp_cache_dir=s:get_dir('ctrlp')
    let g:ctrlp_reuse_window='startify'
    let g:ctrlp_extensions=['funky']
    let g:ctrlp_custom_ignore = {
        \ 'dir': '\v[\/]\.(git|hg|svn|idea)$',
        \ 'file': '\v\.DS_Store$'
        \ }

    if executable('ag')
        let g:ctrlp_user_command='ag %s -l --nocolor -g ""'
    endif

NeoBundle 'drmingdrmer/xptemplate'
" NeoBundle 'ap/vim-buftabline' "{{{
"    set hidden
"    nnoremap <C-N> :bnext<CR>
"    nnoremap <C-P> :bprev<CR>
"}}}
NeoBundle 'bling/vim-bufferline'
NeoBundle 'bling/vim-airline' "{{{
    let g:airline#extensions#tabline#enabled = 1
    " old vim-powerline symbols
    let g:airline_left_sep = '⮀'
    let g:airline_left_alt_sep = '⮁'
    let g:airline_right_sep = '⮂'
    let g:airline_right_alt_sep = '⮃'
    let g:airline_symbols = {}
    let g:airline_symbols.branch = '⭠'
    let g:airline_symbols.readonly = '⭤'
    let g:airline_symbols.linenr = '⭡'
    let g:airline#extensions#bufferline#enabled = 1
    let g:airline#extensions#tabline#enableed = 1
"}}}
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'scrooloose/syntastic' "{{{
    let g:syntastic_c_checkers = ['gcc']
    let g:syntastic_c_check_header = 1
    let g:syntastic_c_compiler = 'gcc'
    let g:syntastic_c_auto_refresh_includes = 1
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 1
"}}}
NeoBundle 'nathanaelkane/vim-indent-guides' "{{{
    if s:is_gui
        hi IndentGuidesOdd ctermbg=black
        hi IndentGuidesEven ctermbg=darkgrey
    endif

"}}}

NeoBundleLazy 'majutsushi/tagbar', {'autoload':{'commands':'TagbarToggle'}} "{{{
    nnoremap <silent> <F9> :TagbarToggle<CR>
"}}}
NeoBundleLazy 'klen/python-mode', {'autoload':{'filetypes':['python']}} "{{{
    let g:pymode_rope=0
"}}}

NeoBundle 'yssource/python.vim'
NeoBundle 'python_match.vim'
NeoBundle 'pythoncomplete'
NeoBundle "aklt/plantuml-syntax"
NeoBundle 'elzr/vim-json'
NeoBundle 'groenewege/vim-less'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'crusoexia/vim-javascript-lib'
NeoBundle 'briancollins/vim-jst'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'amirh/HTML-AutoCloseTag'
NeoBundle 'gorodinskiy/vim-coloresque'
NeoBundle 'tpope/vim-haml'
NeoBundle 'rust-lang/rust.vim'
NeoBundle 'tpope/vim-markdown', {'autoload':{'filtypes' : ['md', 'mkd','markdown']}}
NeoBundle 'reedes/vim-wheel'
NeoBundle 'davidhalter/jedi-vim'
" NeoBundle 'crusoexia/vim-monokai'
" NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'tomasr/molokai' "{{{
    let g:rehash256 = 1
"}}}
NeoBundleLazy 'scrooloose/nerdtree', {'autoload':{'commands':['NERDTreeToggle','NERDTreeFind']}} "{{{
    let NERDTreeShowHidden=1
    let NERDTreeQuitOnOpen=0
    let NERDTreeShowLineNumbers=1
    let NERDTreeChDirMode=0
    let NERDTreeShowBookmarks=1
    let NERDTreeIgnore=['^.git$','^.hg$', '^.svn$']
    let NERDTreeBookmarksFile=s:get_dir('nerdtree') . 'NERDTreeBookmarks'
    " 退出所有buffer时间自动关闭nerd https://github.com/scrooloose/nerdtree/issues/21
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"}}}
NeoBundle 'Xuyuanp/nerdtree-git-plugin'

NeoBundle 'easymotion/vim-easymotion' "{{{
    map <Leader> <Plug>(easymotion-prefix)

"}}}

call neobundle#end()

" F2键切换显示/隐藏菜单栏、工具栏。
" @see http://liyanrui.is-programmer.com/articles/1791/gvim-menu-and-toolbar-toggle.html
if s:is_gui
    set guioptions-=m
    set guioptions-=T
    map <silent> <F4> :if &guioptions =~# 'T' <Bar>
            \set guioptions-=T <Bar>
            \set guioptions-=m <bar>
        \else <Bar>
            \set guioptions+=T <Bar>
            \set guioptions+=m <Bar>
        \endif<CR>
endif

filetype plugin indent on
syntax enable


" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

set background=dark
set t_Co=256

function! s:choose_color_scheme(name) "{{{
    if a:name == 'molokai'
        colorscheme molokai
    elseif a:name == 'monokai'
        colorscheme monokai
    endif
endfunction "}}}

call s:choose_color_scheme('molokai')

" 设置窗口默认大小。
if s:is_gui 
    set columns=128
    set lines=32
endif

" 共享系统剪贴板（yank的时候同时存储到剪贴板中）。
if has('unnamedplus')  " When possible use + register for copy-paste
  set clipboard=unnamed,unnamedplus
else         " On mac and Windows, use * register for copy-paste
  set clipboard=unnamed
endif

" 高亮光标所在行列
set cursorline
" set cursorcolumn

let mapleader=","

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*


" key bindings

" whitespace
set backspace=indent,eol,start                      "allow backspacing everything in insert mode
set autoindent                                      "automatically indent to match adjacent lines
set expandtab                                       "spaces instead of tabs
set smarttab                                        "use shiftwidth to enter tabs
let &tabstop=4              "number of spaces per tab for display
let &softtabstop=4          "number of spaces per tab in insert mode
let &shiftwidth=4           "number of spaces when indenting
set list                                            "highlight whitespace
set listchars=tab:│\ ,trail:•,extends:❯,precedes:❮
set shiftround
set linebreak
let &showbreak='↪ '

" searching
set hlsearch                                        "highlight searches
set incsearch                                       "incremental searching
set ignorecase                                      "ignore case for searching
set smartcase                                       "do case-sensitive if there's a capital letter
if executable('ack')
    set grepprg=ack\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow\ $*
    set grepformat=%f:%l:%c:%m
endif
if executable('ag')
    set grepprg=ag\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow
    set grepformat=%f:%l:%c:%m
endif

" 记录上次编辑的位置
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" keymap
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"

vnoremap <tab> >gv
vnoremap <s-tab> <gv
nnoremap <c-a> ggVG

nnoremap <Leader>fu :CtrlPFunky<CR>
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<CR>

nnoremap <silent> <F2> :NERDTreeToggle<CR>
nnoremap <silent> <F3> :NERDTreeFind<CR>
nnoremap <silent> <F9> :TagbarToggle<CR>
nnoremap <silent> <F1> :GitGutterToggle<CR>

nnoremap <c-h> :bN<CR>
nnoremap <c-l> :bn<CR>


" nnoremap <C-p> :Unite file_rec/async<cr>
nnoremap <c-p> :CtrlP<cr>
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc':'zo')<CR>  " 折叠开/关
